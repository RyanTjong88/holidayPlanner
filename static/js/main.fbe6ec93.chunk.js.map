{"version":3,"sources":["firebase.js","Dropdown.js","Button.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Dropdown","className","this","props","name","date","Component","Button","App","handleSubmit","event","preventDefault","axios","url","responseType","paramsSerializer","params","Qs","stringify","arrayFormat","reqUrl","api_key","country","type","year","state","userInput","proxyHeaders","xmlToJSON","then","results","nationalHolidays","data","response","holidays","holidayData","forEach","holiday","push","setState","handleYearChange","target","value","handleClick","e","selectedHoliday","firebaseData","userHoliday","getBackgroundImage","handlePlans","userText","handleHolidaySubmit","database","ref","preparedHoliday","split","replace","preparedHolidayTwo","toLowerCase","newClass","holidayPlans","on","newState","val","key","plannerData","backgroundImageClass","action","onSubmit","htmlFor","id","onChange","minLength","maxLength","placeholder","map","index","iso","cols","rows","planner","readOnly","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fbe6ec93.chunk.js","sourcesContent":["import firebase from 'firebase/app';    //firebase\r\nimport 'firebase/database';             //firebase database\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDLPmBSOJArNcPL9QnPglUBmu5bKjNyt9g\",\r\n    authDomain: \"projectfive-bc68e.firebaseapp.com\",\r\n    databaseURL: \"https://projectfive-bc68e.firebaseio.com\",\r\n    projectId: \"projectfive-bc68e\",\r\n    storageBucket: \"projectfive-bc68e.appspot.com\",\r\n    messagingSenderId: \"259913504488\",\r\n    appId: \"1:259913504488:web:8589d72bf59294ef1cdb5d\"\r\n    };\r\n  // Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n","import React, {Component} from 'react';\r\n\r\nclass Dropdown extends Component {\r\n    render() {\r\n        return (\r\n            <option className=\"dropdownComponent\">{this.props.name}  ðŸ“…  {this.props.date}</option>\r\n        )\r\n    }\r\n}\r\nexport default Dropdown;","import React from 'react';\r\n\r\nconst Button = () => {\r\n    return <button className=\"buttons\">Submit</button>\r\n    }\r\n\r\nexport default Button;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport firebase from './firebase';\r\nimport axios from 'axios';\r\nimport Qs from 'qs';\r\nimport Dropdown from './Dropdown.js'\r\nimport Button from './Button.js'\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      userInput: '',\r\n      holidayData: [],\r\n      selectedHoliday: '',\r\n      holidayPlans: [],\r\n      firebaseData: {\r\n        userHoliday: '',\r\n        userText: ''\r\n      },\r\n      newClass: '',\r\n    }\r\n  }\r\n\r\n  // connect to Firebase and read data\r\n  componentDidMount() {\r\n    // create a Firebase reference\r\n    const dbRef = firebase.database().ref();\r\n    // listen to the value change and use `response` as the db value\r\n    dbRef.on('value', (response) => {\r\n      // clean up data from Firebase and store in state\r\n      const newState = [];\r\n      const data = response.val();\r\n\r\n      for(let key in data) {\r\n        newState.push({\r\n          key: key, \r\n          plannerData: data[key]\r\n        });  \r\n      }\r\n      \r\n      this.setState({\r\n        holidayPlans: newState\r\n      });\r\n    });\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    axios({\r\n      url: 'https://proxy.hackeryou.com',\r\n      responseType:'json',\r\n      paramsSerializer: function(params) {\r\n        return Qs.stringify(params, {arrayFormat: 'brackets'})\r\n      },\r\n      params: {\r\n        reqUrl: 'https://calendarific.com/api/v2/holidays',\r\n        params: {\r\n          // queryParam: 'value',\r\n          api_key: '8c48c3bc158c0a26c6e03d266e8ec44368d0898f',\r\n          country: 'ca',\r\n          type: 'national',\r\n          year: this.state.userInput,\r\n\r\n        }, \r\n        proxyHeaders: {\r\n          'header_params': 'value'\r\n        },\r\n        xmlToJSON: false\r\n      }\r\n    }).then(results => {\r\n      const nationalHolidays = results.data.response.holidays\r\n\r\n      let holidayData = [];\r\n\r\n      nationalHolidays.forEach(holiday => {\r\n        holidayData.push(holiday)\r\n\r\n        this.setState({\r\n          holidayData\r\n        })\r\n      }); \r\n    }) \r\n  }\r\n\r\n  handleYearChange = (event) => {\r\n    this.setState({\r\n      userInput: event.target.value\r\n    });\r\n  }\r\n  \r\n  handleClick = (e) => {\r\n    this.setState({\r\n      selectedHoliday: e.target.value,\r\n      firebaseData: {\r\n        userHoliday: e.target.value\r\n      }\r\n    }, () => {\r\n      this.getBackgroundImage();\r\n    })\r\n  }\r\n\r\n  handlePlans = (event) => {\r\n    this.setState({\r\n      firebaseData: {\r\n        userHoliday: this.state.firebaseData.userHoliday,\r\n        userText: event.target.value\r\n      }\r\n    });   \r\n  }\r\n\r\n  handleHolidaySubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    // open portal to Firebase\r\n    const dbRef = firebase.database().ref();\r\n\r\n    // add new record to Firebase\r\n    dbRef.push(this.state.firebaseData);\r\n\r\n    // reset input field\r\n    this.setState({\r\n      firebaseData: {\r\n        userHoliday: '',\r\n        userText: ''\r\n      }\r\n    });\r\n  }\r\n\r\n  // this function adds selected holidays image\r\n  getBackgroundImage = () => {\r\n    const selectedHolidayInput = this.state.firebaseData.userHoliday\r\n    const preparedHoliday = selectedHolidayInput.split('ðŸ“…')[0].replace(/\\s/g, \"\").replace(\"'\", \"\")\r\n    // replaces first letter of string to lowercase\r\n    const preparedHolidayTwo = preparedHoliday.replace(/^./, preparedHoliday[0].toLowerCase());\r\n\r\n      this.setState({\r\n        newClass: preparedHolidayTwo\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const backgroundImageClass = this.state.newClass\r\n    return (\r\n      <>\r\n        <header className={`wrapper ${backgroundImageClass}`}>\r\n          <section className=\"yearSection\">\r\n            <h1>Holiday Planner</h1>\r\n            <form action=\"submit\" onSubmit={this.handleSubmit}>\r\n\r\n              <div>\r\n                <label htmlFor=\"newYear\"></label>\r\n\r\n                <input \r\n                type=\"text\" \r\n                className=\"yearInput\" \r\n                id=\"newYear\" \r\n                onChange={this.handleYearChange} \r\n                value={this.state.userInput} \r\n                minLength=\"4\" \r\n                maxLength=\"4\" \r\n                placeholder=\"Enter Year\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"headerButtonContainer\">\r\n                <Button />\r\n              </div>\r\n\r\n              <div>\r\n                <select className=\"dropdown\" onChange={this.handleClick}  name=\"holidaySelections\">\r\n                <option>Holiday</option>\r\n                  {this.state.holidayData.map((data, index) => {\r\n                    return (\r\n\r\n                      <Dropdown value={data.name} name={data.name} date={data.date.iso} key={index}/>\r\n                    )\r\n                  })}\r\n                </select>\r\n              </div>\r\n\r\n            </form>\r\n          </section>\r\n        </header>  \r\n\r\n        <main>\r\n          <section className=\"holidayPlansSection\">\r\n            <div className=\"wrapper mainContainerOne\">\r\n              <form className=\"firstForm\" action=\"submit\" onSubmit={this.handleHolidaySubmit}>\r\n\r\n                  <h2 value={this.state.firebaseData.userHoliday}>{this.state.firebaseData.userHoliday}</h2>\r\n\r\n                <textarea\r\n                  name=\"plans\" \r\n                  cols=\"30\" \r\n                  rows=\"10\" \r\n                  minLength=\"10\" \r\n                  maxLength=\"\" \r\n                  onChange={this.handlePlans}\r\n                  value={this.state.firebaseData.userText}\r\n                  placeholder=\"Let's Make Some Plans!\"\r\n                >\r\n                </textarea>\r\n\r\n                <div>\r\n                  <Button />\r\n                </div>\r\n\r\n              </form>\r\n            </div>\r\n          </section>\r\n\r\n          <section className=\"firebaseDataSection\">\r\n            <div className=\"wrapper\">\r\n              <form>\r\n                <ul>\r\n                  {this.state.holidayPlans.map((planner) => {\r\n                    return(\r\n                      <li key={planner.key}>\r\n                        <div>\r\n                          <h3>{planner.plannerData.userHoliday}</h3>\r\n\r\n                          <textarea \r\n                          name=\"madePlans\" \r\n                          cols=\"30\" \r\n                          rows=\"10\" \r\n                          readOnly=\"readOnly\"\r\n                          value={planner.plannerData.userText}\r\n                          >\r\n\r\n                            {planner.plannerData.userText}\r\n\r\n                          </textarea>\r\n                        </div>\r\n                      </li>\r\n                    );\r\n                  })}\r\n                </ul>\r\n              </form>\r\n            </div>\r\n          </section>\r\n        </main>\r\n\r\n        <footer>\r\n          <a href=\"https://junocollege.com/\">Created at Juno College</a>\r\n          <p>Developed by Ryan Tjong</p>\r\n        </footer>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}